// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  fullName        String
  username        String            @unique
  password        String
  phone           String?           @unique
  address         String?
  role            Role              @relation(fields: [roleId], references: [id])
  roleId          Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  verificatedUser VerificatedUser[]
  postRating      PostRating[]
  postComment     PostComment[]
  productRating   ProductRating[]
  productComment  ProductComment[]
  orders          Order[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model VerificatedUser {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
}

model Post {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  video       String
  poster      String
  content     String
  products    Product[]
  tags        String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  postRating  PostRating[]
  postComment PostComment[]
}

model PostRating {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  star      Int
  createdAt DateTime @default(now())
}

model PostComment {
  id        Int      @id @default(autoincrement())
  postId    Int
  post      Post     @relation(fields: [postId], references: [id])
  repliedId Int?
  comment   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  product     Product[]
}

model Product {
  id             Int                  @id @default(autoincrement())
  name           String
  description    String
  price          Float
  url            String? // software url
  information    ProductInformation[]
  poster         String
  images         ProductImage[]
  productType    ProductType
  category       Category             @relation(fields: [categoryId], references: [id])
  post           Post[]
  categoryId     Int
  createdAt      DateTime             @default(now())
  productRating  ProductRating[]
  productComment ProductComment[]
  orderItem      OrderItem[]
  discountRuleId Int
  discountRule   DiscountRule         @relation(fields: [discountRuleId], references: [id])
}

model DiscountRule {
  id              Int          @id @default(autoincrement())
  name            String
  discountType    DiscountType
  discountValue   Float
  minimumQuantity Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  product         Product[]
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

model ProductRating {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  star      Int
  createdAt DateTime @default(now())
}

model ProductComment {
  id        Int      @id @default(autoincrement())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  repliedId Int?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
}

model ProductInformation {
  id        Int      @id @default(autoincrement())
  name      String
  value     String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  createdAt DateTime @default(now())
}

enum ProductType {
  SOFTWARE
  HARDWARE
}

model Order {
  id                Int             @id @default(autoincrement())
  userId            Int
  user              User            @relation(fields: [userId], references: [id])
  paymentStatus     PaymentStatus   @default(DEFAULT)
  shippingServiceId Int
  shippingService   ShippingService @relation(fields: [shippingServiceId], references: [id])
  deliveryStatus    DeliveryStatus  @default(DEFAULT)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  orderItem         OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
}

enum DeliveryStatus {
  DEFAULT
  PENDING
  DELIVERING
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  DEFAULT
  PENDING
  PAID
  CANCELED
}

model ShippingService {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  price       Float
  unit        String
  Order       Order[]
}
